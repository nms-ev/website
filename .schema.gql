"""ISO8601 Date values"""
scalar Date

"""BigInt value"""
scalar GraphQLBigInt

"""A Float or a String"""
scalar GraphQLStringOrFloat

"""Hashed string values"""
scalar Hash

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Mutation {
  create_address_item(data: create_address_input!): address
  create_address_items(data: [create_address_input!], filter: address_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [address!]!
  create_events_item(data: create_events_input!): events
  create_events_items(data: [create_events_input!], filter: events_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [events!]!
  create_events_translations_item(data: create_events_translations_input!): events_translations
  create_events_translations_items(data: [create_events_translations_input!], filter: events_translations_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [events_translations!]!
  create_languages_item(data: create_languages_input!): languages
  create_languages_items(data: [create_languages_input!], filter: languages_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [languages!]!
  create_links_item(data: create_links_input!): links
  create_links_items(data: [create_links_input!], filter: links_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [links!]!
  create_members_item(data: create_members_input!): members
  create_members_items(data: [create_members_input!], filter: members_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [members!]!
  create_menu_item(data: create_menu_input!): menu
  create_menu_items(data: [create_menu_input!], filter: menu_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [menu!]!
  create_names_item(data: create_names_input!): names
  create_names_items(data: [create_names_input!], filter: names_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [names!]!
  create_pages_item(data: create_pages_input!): pages
  create_pages_items(data: [create_pages_input!], filter: pages_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [pages!]!
  create_pages_translations_item(data: create_pages_translations_input!): pages_translations
  create_pages_translations_items(data: [create_pages_translations_input!], filter: pages_translations_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [pages_translations!]!
  delete_address_item(id: ID!): delete_one
  delete_address_items(ids: [ID]!): delete_many
  delete_events_item(id: ID!): delete_one
  delete_events_items(ids: [ID]!): delete_many
  delete_events_translations_item(id: ID!): delete_one
  delete_events_translations_items(ids: [ID]!): delete_many
  delete_languages_item(id: ID!): delete_one
  delete_languages_items(ids: [ID]!): delete_many
  delete_links_item(id: ID!): delete_one
  delete_links_items(ids: [ID]!): delete_many
  delete_members_item(id: ID!): delete_one
  delete_members_items(ids: [ID]!): delete_many
  delete_menu_item(id: ID!): delete_one
  delete_menu_items(ids: [ID]!): delete_many
  delete_names_item(id: ID!): delete_one
  delete_names_items(ids: [ID]!): delete_many
  delete_pages_item(id: ID!): delete_one
  delete_pages_items(ids: [ID]!): delete_many
  delete_pages_translations_item(id: ID!): delete_one
  delete_pages_translations_items(ids: [ID]!): delete_many
  update_address_batch(data: [update_address_input!], filter: address_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [address!]!
  update_address_item(data: update_address_input!, id: ID!): address
  update_address_items(data: update_address_input!, filter: address_filter, ids: [ID]!, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [address!]!
  update_events_batch(data: [update_events_input!], filter: events_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [events!]!
  update_events_item(data: update_events_input!, id: ID!): events
  update_events_items(data: update_events_input!, filter: events_filter, ids: [ID]!, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [events!]!
  update_events_translations_batch(data: [update_events_translations_input!], filter: events_translations_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [events_translations!]!
  update_events_translations_item(data: update_events_translations_input!, id: ID!): events_translations
  update_events_translations_items(data: update_events_translations_input!, filter: events_translations_filter, ids: [ID]!, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [events_translations!]!
  update_languages_batch(data: [update_languages_input!], filter: languages_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [languages!]!
  update_languages_item(data: update_languages_input!, id: ID!): languages
  update_languages_items(data: update_languages_input!, filter: languages_filter, ids: [ID]!, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [languages!]!
  update_links_batch(data: [update_links_input!], filter: links_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [links!]!
  update_links_item(data: update_links_input!, id: ID!): links
  update_links_items(data: update_links_input!, filter: links_filter, ids: [ID]!, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [links!]!
  update_members_batch(data: [update_members_input!], filter: members_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [members!]!
  update_members_item(data: update_members_input!, id: ID!): members
  update_members_items(data: update_members_input!, filter: members_filter, ids: [ID]!, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [members!]!
  update_menu_batch(data: [update_menu_input!], filter: menu_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [menu!]!
  update_menu_item(data: update_menu_input!, id: ID!): menu
  update_menu_items(data: update_menu_input!, filter: menu_filter, ids: [ID]!, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [menu!]!
  update_names_batch(data: [update_names_input!], filter: names_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [names!]!
  update_names_item(data: update_names_input!, id: ID!): names
  update_names_items(data: update_names_input!, filter: names_filter, ids: [ID]!, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [names!]!
  update_pages_batch(data: [update_pages_input!], filter: pages_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [pages!]!
  update_pages_item(data: update_pages_input!, id: ID!): pages
  update_pages_items(data: update_pages_input!, filter: pages_filter, ids: [ID]!, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [pages!]!
  update_pages_translations_batch(data: [update_pages_translations_input!], filter: pages_translations_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [pages_translations!]!
  update_pages_translations_item(data: update_pages_translations_input!, id: ID!): pages_translations
  update_pages_translations_items(data: update_pages_translations_input!, filter: pages_translations_filter, ids: [ID]!, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [pages_translations!]!
}

type Query {
  address(filter: address_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [address!]!
  address_aggregated(filter: address_filter, groupBy: [String], limit: Int, offset: Int, page: Int, search: String, sort: [String]): [address_aggregated!]!
  address_by_id(id: ID!): address
  events(filter: events_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [events!]!
  events_aggregated(filter: events_filter, groupBy: [String], limit: Int, offset: Int, page: Int, search: String, sort: [String]): [events_aggregated!]!
  events_by_id(id: ID!): events
  events_translations(filter: events_translations_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [events_translations!]!
  events_translations_aggregated(filter: events_translations_filter, groupBy: [String], limit: Int, offset: Int, page: Int, search: String, sort: [String]): [events_translations_aggregated!]!
  events_translations_by_id(id: ID!): events_translations
  languages(filter: languages_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [languages!]!
  languages_aggregated(filter: languages_filter, groupBy: [String], limit: Int, offset: Int, page: Int, search: String, sort: [String]): [languages_aggregated!]!
  languages_by_id(id: ID!): languages
  links(filter: links_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [links!]!
  links_aggregated(filter: links_filter, groupBy: [String], limit: Int, offset: Int, page: Int, search: String, sort: [String]): [links_aggregated!]!
  links_by_id(id: ID!): links
  members(filter: members_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [members!]!
  members_aggregated(filter: members_filter, groupBy: [String], limit: Int, offset: Int, page: Int, search: String, sort: [String]): [members_aggregated!]!
  members_by_id(id: ID!): members
  menu(filter: menu_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [menu!]!
  menu_aggregated(filter: menu_filter, groupBy: [String], limit: Int, offset: Int, page: Int, search: String, sort: [String]): [menu_aggregated!]!
  menu_by_id(id: ID!): menu
  names(filter: names_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [names!]!
  names_aggregated(filter: names_filter, groupBy: [String], limit: Int, offset: Int, page: Int, search: String, sort: [String]): [names_aggregated!]!
  names_by_id(id: ID!): names
  pages(filter: pages_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [pages!]!
  pages_aggregated(filter: pages_filter, groupBy: [String], limit: Int, offset: Int, page: Int, search: String, sort: [String]): [pages_aggregated!]!
  pages_by_id(id: ID!): pages
  pages_translations(filter: pages_translations_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [pages_translations!]!
  pages_translations_aggregated(filter: pages_translations_filter, groupBy: [String], limit: Int, offset: Int, page: Int, search: String, sort: [String]): [pages_translations_aggregated!]!
  pages_translations_by_id(id: ID!): pages_translations
}

type address {
  city: String!
  country: String!
  id: ID!
  street: String!
  zip: String!
}

type address_aggregated {
  avg: address_aggregated_fields
  avgDistinct: address_aggregated_fields
  count: address_aggregated_count
  countAll: Int
  countDistinct: address_aggregated_count
  group: JSON
  max: address_aggregated_fields
  min: address_aggregated_fields
  sum: address_aggregated_fields
  sumDistinct: address_aggregated_fields
}

type address_aggregated_count {
  city: Int
  country: Int
  id: Int
  street: Int
  zip: Int
}

type address_aggregated_fields {
  id: Float
}

input address_filter {
  _and: [address_filter]
  _or: [address_filter]
  city: string_filter_operators
  country: string_filter_operators
  id: number_filter_operators
  street: string_filter_operators
  zip: string_filter_operators
}

input boolean_filter_operators {
  _eq: Boolean
  _neq: Boolean
  _nnull: Boolean
  _null: Boolean
}

input count_function_filter_operators {
  count: number_filter_operators
}

type count_functions {
  count: Int
}

input create_address_input {
  city: String!
  country: String!
  id: ID
  street: String!
  zip: String!
}

input create_directus_files_input {
  charset: String
  description: String
  duration: Int
  embed: String
  filename_disk: String
  filename_download: String!
  filesize: GraphQLBigInt
  folder: create_directus_folders_input
  height: Int
  id: ID
  location: String
  metadata: JSON
  modified_by: create_directus_users_input
  modified_on: Date
  storage: String!
  tags: JSON
  title: String
  type: String
  uploaded_by: create_directus_users_input
  uploaded_on: Date
  width: Int
}

input create_directus_folders_input {
  id: ID
  name: String!
  parent: create_directus_folders_input
}

input create_directus_roles_input {
  admin_access: Boolean!
  app_access: Boolean
  description: String
  enforce_tfa: Boolean!
  icon: String
  id: ID
  ip_access: [String]
  name: String!
  users: [create_directus_users_input]
}

input create_directus_users_input {
  auth_data: JSON
  avatar: create_directus_files_input
  description: String
  email: String
  email_notifications: Boolean
  external_identifier: String
  first_name: String
  id: ID
  language: String
  last_access: Date
  last_name: String
  last_page: String
  location: String
  password: Hash
  provider: String
  role: create_directus_roles_input
  status: String
  tags: JSON
  tfa_secret: Hash
  theme: String
  title: String
  token: Hash
}

input create_events_input {
  """Date of the event"""
  date: Date!
  date_created: Date
  date_updated: Date
  id: ID
  location: String!
  slug: String!
  status: String
  time: String
  translations: [create_events_translations_input]
  type: String!
}

input create_events_translations_input {
  body: String!
  events_id: create_events_input
  id: ID
  languages_id: create_languages_input
  title: String!
}

input create_languages_input {
  code: ID!
  name: String
}

input create_links_input {
  date_created: Date
  date_updated: Date
  href: String!
  huge: Boolean
  icon: String
  id: ID
  label: String!
  sort: Int
  status: String
  user_created: create_directus_users_input
  user_updated: create_directus_users_input
}

input create_members_input {
  address: create_address_input
  birthday: String!

  """The yearly contribution for the member"""
  contribution: Float
  date_created: Date
  date_updated: Date
  email: String!
  id: ID
  membership: Date
  mollie_customer_id: String
  name: String!
  status: String
  type: String!
  user_created: create_directus_users_input
  user_updated: create_directus_users_input
}

input create_menu_input {
  date_created: Date
  date_updated: Date
  slug: ID!
  user_created: create_directus_users_input
  user_updated: create_directus_users_input
}

input create_names_input {
  date_created: Date
  date_updated: Date
  id: ID
  name: String!
  sort: Int
  status: String
  user_created: create_directus_users_input
  user_updated: create_directus_users_input
}

input create_pages_input {
  date_created: Date
  date_updated: Date
  id: ID
  slug: String!
  sort: Int
  status: String
  translations: [create_pages_translations_input]
}

input create_pages_translations_input {
  body: String!
  id: ID
  languages_id: create_languages_input
  pages_id: create_pages_input
  title: String!
}

input date_filter_operators {
  _between: [GraphQLStringOrFloat]
  _eq: String
  _gt: String
  _gte: String
  _in: [String]
  _lt: String
  _lte: String
  _nbetween: [GraphQLStringOrFloat]
  _neq: String
  _nin: [String]
  _nnull: Boolean
  _null: Boolean
}

input date_function_filter_operators {
  day: number_filter_operators
  month: number_filter_operators
  week: number_filter_operators
  weekday: number_filter_operators
  year: number_filter_operators
}

type date_functions {
  day: Int
  month: Int
  week: Int
  weekday: Int
  year: Int
}

input datetime_function_filter_operators {
  day: number_filter_operators
  hour: number_filter_operators
  minute: number_filter_operators
  month: number_filter_operators
  second: number_filter_operators
  week: number_filter_operators
  weekday: number_filter_operators
  year: number_filter_operators
}

type datetime_functions {
  day: Int
  hour: Int
  minute: Int
  month: Int
  second: Int
  week: Int
  weekday: Int
  year: Int
}

type delete_many {
  ids: [ID]!
}

type delete_one {
  id: ID!
}

type directus_files {
  charset: String
  description: String
  duration: Int
  embed: String
  filename_disk: String
  filename_download: String!
  filesize: GraphQLBigInt
  folder(filter: directus_folders_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_folders
  height: Int
  id: ID!
  location: String
  metadata: JSON
  metadata_func: count_functions
  modified_by(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
  modified_on: Date
  modified_on_func: datetime_functions
  storage: String!
  tags: JSON
  tags_func: count_functions
  title: String
  type: String
  uploaded_by(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
  uploaded_on: Date
  uploaded_on_func: datetime_functions
  width: Int
}

input directus_files_filter {
  _and: [directus_files_filter]
  _or: [directus_files_filter]
  charset: string_filter_operators
  description: string_filter_operators
  duration: number_filter_operators
  embed: string_filter_operators
  filename_disk: string_filter_operators
  filename_download: string_filter_operators
  filesize: number_filter_operators
  folder: directus_folders_filter
  height: number_filter_operators
  id: string_filter_operators
  location: string_filter_operators
  metadata: string_filter_operators
  metadata_func: count_function_filter_operators
  modified_by: directus_users_filter
  modified_on: date_filter_operators
  modified_on_func: datetime_function_filter_operators
  storage: string_filter_operators
  tags: string_filter_operators
  tags_func: count_function_filter_operators
  title: string_filter_operators
  type: string_filter_operators
  uploaded_by: directus_users_filter
  uploaded_on: date_filter_operators
  uploaded_on_func: datetime_function_filter_operators
  width: number_filter_operators
}

type directus_folders {
  id: ID!
  name: String!
  parent(filter: directus_folders_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_folders
}

input directus_folders_filter {
  _and: [directus_folders_filter]
  _or: [directus_folders_filter]
  id: string_filter_operators
  name: string_filter_operators
  parent: directus_folders_filter
}

type directus_roles {
  admin_access: Boolean!
  app_access: Boolean
  description: String
  enforce_tfa: Boolean!
  icon: String
  id: ID!
  ip_access: [String]
  name: String!
  users(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [directus_users]
  users_func: count_functions
}

input directus_roles_filter {
  _and: [directus_roles_filter]
  _or: [directus_roles_filter]
  admin_access: boolean_filter_operators
  app_access: boolean_filter_operators
  description: string_filter_operators
  enforce_tfa: boolean_filter_operators
  icon: string_filter_operators
  id: string_filter_operators
  ip_access: string_filter_operators
  name: string_filter_operators
  users: directus_users_filter
  users_func: count_function_filter_operators
}

type directus_users {
  auth_data: JSON
  auth_data_func: count_functions
  avatar(filter: directus_files_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_files
  description: String
  email: String
  email_notifications: Boolean
  external_identifier: String
  first_name: String
  id: ID!
  language: String
  last_access: Date
  last_access_func: datetime_functions
  last_name: String
  last_page: String
  location: String
  password: Hash
  provider: String
  role(filter: directus_roles_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_roles
  status: String
  tags: JSON
  tags_func: count_functions
  tfa_secret: Hash
  theme: String
  title: String
  token: Hash
}

input directus_users_filter {
  _and: [directus_users_filter]
  _or: [directus_users_filter]
  auth_data: string_filter_operators
  auth_data_func: count_function_filter_operators
  avatar: directus_files_filter
  description: string_filter_operators
  email: string_filter_operators
  email_notifications: boolean_filter_operators
  external_identifier: string_filter_operators
  first_name: string_filter_operators
  id: string_filter_operators
  language: string_filter_operators
  last_access: date_filter_operators
  last_access_func: datetime_function_filter_operators
  last_name: string_filter_operators
  last_page: string_filter_operators
  location: string_filter_operators
  password: hash_filter_operators
  provider: string_filter_operators
  role: directus_roles_filter
  status: string_filter_operators
  tags: string_filter_operators
  tags_func: count_function_filter_operators
  tfa_secret: hash_filter_operators
  theme: string_filter_operators
  title: string_filter_operators
  token: hash_filter_operators
}

type events {
  """Date of the event"""
  date: Date!
  date_created: Date
  date_created_func: datetime_functions
  date_func: date_functions
  date_updated: Date
  date_updated_func: datetime_functions
  id: ID!
  location: String!
  slug: String!
  status: String
  time: String
  time_func: time_functions
  translations(filter: events_translations_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [events_translations]
  translations_func: count_functions
  type: String!
}

type events_aggregated {
  avg: events_aggregated_fields
  avgDistinct: events_aggregated_fields
  count: events_aggregated_count
  countAll: Int
  countDistinct: events_aggregated_count
  group: JSON
  max: events_aggregated_fields
  min: events_aggregated_fields
  sum: events_aggregated_fields
  sumDistinct: events_aggregated_fields
}

type events_aggregated_count {
  """Date of the event"""
  date: Int
  date_created: Int
  date_updated: Int
  id: Int
  location: Int
  slug: Int
  status: Int
  time: Int
  translations: Int
  type: Int
}

type events_aggregated_fields {
  id: Float
}

input events_filter {
  _and: [events_filter]
  _or: [events_filter]
  date: date_filter_operators
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  date_func: date_function_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  id: number_filter_operators
  location: string_filter_operators
  slug: string_filter_operators
  status: string_filter_operators
  time: string_filter_operators
  time_func: time_function_filter_operators
  translations: events_translations_filter
  translations_func: count_function_filter_operators
  type: string_filter_operators
}

type events_translations {
  body: String!
  events_id(filter: events_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): events
  id: ID!
  languages_id(filter: languages_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): languages
  title: String!
}

type events_translations_aggregated {
  avg: events_translations_aggregated_fields
  avgDistinct: events_translations_aggregated_fields
  count: events_translations_aggregated_count
  countAll: Int
  countDistinct: events_translations_aggregated_count
  group: JSON
  max: events_translations_aggregated_fields
  min: events_translations_aggregated_fields
  sum: events_translations_aggregated_fields
  sumDistinct: events_translations_aggregated_fields
}

type events_translations_aggregated_count {
  body: Int
  events_id: Int
  id: Int
  languages_id: Int
  title: Int
}

type events_translations_aggregated_fields {
  events_id: Float
  id: Float
}

input events_translations_filter {
  _and: [events_translations_filter]
  _or: [events_translations_filter]
  body: string_filter_operators
  events_id: events_filter
  id: number_filter_operators
  languages_id: languages_filter
  title: string_filter_operators
}

input hash_filter_operators {
  _empty: Boolean
  _nempty: Boolean
  _nnull: Boolean
  _null: Boolean
}

type languages {
  code: ID!
  name: String
}

type languages_aggregated {
  count: languages_aggregated_count
  countAll: Int
  countDistinct: languages_aggregated_count
  group: JSON
}

type languages_aggregated_count {
  code: Int
  name: Int
}

input languages_filter {
  _and: [languages_filter]
  _or: [languages_filter]
  code: string_filter_operators
  name: string_filter_operators
}

type links {
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  href: String!
  huge: Boolean
  icon: String
  id: ID!
  label: String!
  sort: Int
  status: String
  user_created(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
  user_updated(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
}

type links_aggregated {
  avg: links_aggregated_fields
  avgDistinct: links_aggregated_fields
  count: links_aggregated_count
  countAll: Int
  countDistinct: links_aggregated_count
  group: JSON
  max: links_aggregated_fields
  min: links_aggregated_fields
  sum: links_aggregated_fields
  sumDistinct: links_aggregated_fields
}

type links_aggregated_count {
  date_created: Int
  date_updated: Int
  href: Int
  huge: Int
  icon: Int
  id: Int
  label: Int
  sort: Int
  status: Int
  user_created: Int
  user_updated: Int
}

type links_aggregated_fields {
  id: Float
  sort: Float
}

input links_filter {
  _and: [links_filter]
  _or: [links_filter]
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  href: string_filter_operators
  huge: boolean_filter_operators
  icon: string_filter_operators
  id: number_filter_operators
  label: string_filter_operators
  sort: number_filter_operators
  status: string_filter_operators
  user_created: directus_users_filter
  user_updated: directus_users_filter
}

type members {
  address(filter: address_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): address
  birthday: String!

  """The yearly contribution for the member"""
  contribution: Float
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  email: String!
  id: ID!
  membership: Date
  membership_func: date_functions
  mollie_customer_id: String
  name: String!
  status: String
  type: String!
  user_created(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
  user_updated(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
}

type members_aggregated {
  avg: members_aggregated_fields
  avgDistinct: members_aggregated_fields
  count: members_aggregated_count
  countAll: Int
  countDistinct: members_aggregated_count
  group: JSON
  max: members_aggregated_fields
  min: members_aggregated_fields
  sum: members_aggregated_fields
  sumDistinct: members_aggregated_fields
}

type members_aggregated_count {
  address: Int
  birthday: Int

  """The yearly contribution for the member"""
  contribution: Int
  date_created: Int
  date_updated: Int
  email: Int
  id: Int
  membership: Int
  mollie_customer_id: Int
  name: Int
  status: Int
  type: Int
  user_created: Int
  user_updated: Int
}

type members_aggregated_fields {
  address: Float

  """The yearly contribution for the member"""
  contribution: Float
}

input members_filter {
  _and: [members_filter]
  _or: [members_filter]
  address: address_filter
  birthday: string_filter_operators
  contribution: number_filter_operators
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  email: string_filter_operators
  id: string_filter_operators
  membership: date_filter_operators
  membership_func: date_function_filter_operators
  mollie_customer_id: string_filter_operators
  name: string_filter_operators
  status: string_filter_operators
  type: string_filter_operators
  user_created: directus_users_filter
  user_updated: directus_users_filter
}

type menu {
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  slug: ID!
  user_created(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
  user_updated(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
}

type menu_aggregated {
  count: menu_aggregated_count
  countAll: Int
  countDistinct: menu_aggregated_count
  group: JSON
}

type menu_aggregated_count {
  date_created: Int
  date_updated: Int
  slug: Int
  user_created: Int
  user_updated: Int
}

input menu_filter {
  _and: [menu_filter]
  _or: [menu_filter]
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  slug: string_filter_operators
  user_created: directus_users_filter
  user_updated: directus_users_filter
}

type names {
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  id: ID!
  name: String!
  sort: Int
  status: String
  user_created(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
  user_updated(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
}

type names_aggregated {
  avg: names_aggregated_fields
  avgDistinct: names_aggregated_fields
  count: names_aggregated_count
  countAll: Int
  countDistinct: names_aggregated_count
  group: JSON
  max: names_aggregated_fields
  min: names_aggregated_fields
  sum: names_aggregated_fields
  sumDistinct: names_aggregated_fields
}

type names_aggregated_count {
  date_created: Int
  date_updated: Int
  id: Int
  name: Int
  sort: Int
  status: Int
  user_created: Int
  user_updated: Int
}

type names_aggregated_fields {
  id: Float
  sort: Float
}

input names_filter {
  _and: [names_filter]
  _or: [names_filter]
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  id: number_filter_operators
  name: string_filter_operators
  sort: number_filter_operators
  status: string_filter_operators
  user_created: directus_users_filter
  user_updated: directus_users_filter
}

input number_filter_operators {
  _between: [GraphQLStringOrFloat]
  _eq: GraphQLStringOrFloat
  _gt: GraphQLStringOrFloat
  _gte: GraphQLStringOrFloat
  _in: [GraphQLStringOrFloat]
  _lt: GraphQLStringOrFloat
  _lte: GraphQLStringOrFloat
  _nbetween: [GraphQLStringOrFloat]
  _neq: GraphQLStringOrFloat
  _nin: [GraphQLStringOrFloat]
  _nnull: Boolean
  _null: Boolean
}

type pages {
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  id: ID!
  slug: String!
  sort: Int
  status: String
  translations(filter: pages_translations_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [pages_translations]
  translations_func: count_functions
}

type pages_aggregated {
  avg: pages_aggregated_fields
  avgDistinct: pages_aggregated_fields
  count: pages_aggregated_count
  countAll: Int
  countDistinct: pages_aggregated_count
  group: JSON
  max: pages_aggregated_fields
  min: pages_aggregated_fields
  sum: pages_aggregated_fields
  sumDistinct: pages_aggregated_fields
}

type pages_aggregated_count {
  date_created: Int
  date_updated: Int
  id: Int
  slug: Int
  sort: Int
  status: Int
  translations: Int
}

type pages_aggregated_fields {
  id: Float
  sort: Float
}

input pages_filter {
  _and: [pages_filter]
  _or: [pages_filter]
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  id: number_filter_operators
  slug: string_filter_operators
  sort: number_filter_operators
  status: string_filter_operators
  translations: pages_translations_filter
  translations_func: count_function_filter_operators
}

type pages_translations {
  body: String!
  id: ID!
  languages_id(filter: languages_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): languages
  pages_id(filter: pages_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): pages
  title: String!
}

type pages_translations_aggregated {
  avg: pages_translations_aggregated_fields
  avgDistinct: pages_translations_aggregated_fields
  count: pages_translations_aggregated_count
  countAll: Int
  countDistinct: pages_translations_aggregated_count
  group: JSON
  max: pages_translations_aggregated_fields
  min: pages_translations_aggregated_fields
  sum: pages_translations_aggregated_fields
  sumDistinct: pages_translations_aggregated_fields
}

type pages_translations_aggregated_count {
  body: Int
  id: Int
  languages_id: Int
  pages_id: Int
  title: Int
}

type pages_translations_aggregated_fields {
  id: Float
  pages_id: Float
}

input pages_translations_filter {
  _and: [pages_translations_filter]
  _or: [pages_translations_filter]
  body: string_filter_operators
  id: number_filter_operators
  languages_id: languages_filter
  pages_id: pages_filter
  title: string_filter_operators
}

input string_filter_operators {
  _contains: String
  _empty: Boolean
  _ends_with: String
  _eq: String
  _icontains: String
  _in: [String]
  _ncontains: String
  _nempty: Boolean
  _nends_with: String
  _neq: String
  _nin: [String]
  _nnull: Boolean
  _nstarts_with: String
  _null: Boolean
  _starts_with: String
}

input time_function_filter_operators {
  hour: number_filter_operators
  minute: number_filter_operators
  second: number_filter_operators
}

type time_functions {
  hour: Int
  minute: Int
  second: Int
}

input update_address_input {
  city: String
  country: String
  id: ID
  street: String
  zip: String
}

input update_directus_files_input {
  charset: String
  description: String
  duration: Int
  embed: String
  filename_disk: String
  filename_download: String
  filesize: GraphQLBigInt
  folder: update_directus_folders_input
  height: Int
  id: ID
  location: String
  metadata: JSON
  modified_by: update_directus_users_input
  modified_on: Date
  storage: String
  tags: JSON
  title: String
  type: String
  uploaded_by: update_directus_users_input
  uploaded_on: Date
  width: Int
}

input update_directus_folders_input {
  id: ID
  name: String
  parent: update_directus_folders_input
}

input update_directus_roles_input {
  admin_access: Boolean
  app_access: Boolean
  description: String
  enforce_tfa: Boolean
  icon: String
  id: ID
  ip_access: [String]
  name: String
  users: [update_directus_users_input]
}

input update_directus_users_input {
  auth_data: JSON
  avatar: update_directus_files_input
  description: String
  email: String
  email_notifications: Boolean
  external_identifier: String
  first_name: String
  id: ID
  language: String
  last_access: Date
  last_name: String
  last_page: String
  location: String
  password: Hash
  provider: String
  role: update_directus_roles_input
  status: String
  tags: JSON
  tfa_secret: Hash
  theme: String
  title: String
  token: Hash
}

input update_events_input {
  """Date of the event"""
  date: Date
  date_created: Date
  date_updated: Date
  id: ID
  location: String
  slug: String
  status: String
  time: String
  translations: [update_events_translations_input]
  type: String
}

input update_events_translations_input {
  body: String
  events_id: update_events_input
  id: ID
  languages_id: update_languages_input
  title: String
}

input update_languages_input {
  code: ID
  name: String
}

input update_links_input {
  date_created: Date
  date_updated: Date
  href: String
  huge: Boolean
  icon: String
  id: ID
  label: String
  sort: Int
  status: String
  user_created: update_directus_users_input
  user_updated: update_directus_users_input
}

input update_members_input {
  address: update_address_input
  birthday: String

  """The yearly contribution for the member"""
  contribution: Float
  date_created: Date
  date_updated: Date
  email: String
  id: ID
  membership: Date
  mollie_customer_id: String
  name: String
  status: String
  type: String
  user_created: update_directus_users_input
  user_updated: update_directus_users_input
}

input update_menu_input {
  date_created: Date
  date_updated: Date
  slug: ID
  user_created: update_directus_users_input
  user_updated: update_directus_users_input
}

input update_names_input {
  date_created: Date
  date_updated: Date
  id: ID
  name: String
  sort: Int
  status: String
  user_created: update_directus_users_input
  user_updated: update_directus_users_input
}

input update_pages_input {
  date_created: Date
  date_updated: Date
  id: ID
  slug: String
  sort: Int
  status: String
  translations: [update_pages_translations_input]
}

input update_pages_translations_input {
  body: String
  id: ID
  languages_id: update_languages_input
  pages_id: update_pages_input
  title: String
}